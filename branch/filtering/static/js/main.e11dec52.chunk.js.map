{"version":3,"sources":["serviceWorker.ts","models.ts","dataUtils/dataUtils.ts","Upload/Upload.tsx","InstructionsButton/InstructionsButton.tsx","TimeUnitRadio/TimeUnitRadio.tsx","Senders/Senders.tsx","EmptyState/EmptyState.tsx","Chart/Chart.tsx","COLORS.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message","TimeUnit","DAY","WEEK","MONTH","YEAR","getMessages","files","a","promisesForMessages","Array","from","map","getMessagesFromFile","Promise","all","messages","flat","convertMessagesToData","sortedMessages","sortBy","sortMessagesByOldestFirst","senders","orderBy","Object","entries","getNumberOfMessagesBySender","sender","numberOfMessages","getSendersByMostMessagesFirst","convert","unit","timeUnit","messagesGroupedByTime","groupBy","time","getStartTimeFn","groupMessagesByTime","length","firstTime","lastTime","start","end","eachDayOfInterval","eachWeekOfInterval","weekStartsOn","eachMonthOfInterval","eachYearOfInterval","getIntervalFn","getInterval","date","getTime","getTimesWithMessages","numberOfMessagesBySender","id","formatTime","Number","reduce","result","convertMessagesToDataForTimeUnit","file","readJsonObjectFile","content","extractMessages","readFile","string","JSON","parse","resolve","reader","FileReader","onload","event","target","toString","readAsText","sender_name","timestamp_ms","decode","mapValues","groupMessagesBySender","messagesBySender","startOfDay","startOfWeek","startOfMonth","startOfYear","format","Date","noopToPreventXhrRequest","Upload","onComplete","style","beforeUpload","fileBeingProcessed","allFiles","fileList","uid","customRequest","accept","multiple","showUploadList","block","UploadOutlined","Paragraph","Text","InstructionsButton","useState","isDrawerOpen","setIsDrawerOpen","type","onClick","QuestionCircleOutlined","title","onClose","visible","width","Math","min","innerWidth","footer","textAlign","role","aria-label","href","rel","strong","TimeUnitRadio","selected","onSelect","disabled","disabledUnits","Group","values","Button","value","checked","onChange","includes","key","Senders","colorMap","indeterminate","margin","filter","name","color","text","EmptyState","image","PRESENTED_IMAGE_SIMPLE","marginTop","getTimesToShowTicksFor","data","_","index","floor","undefined","Chart","height","keys","colors","top","right","bottom","left","enableLabel","axisBottom","tickPadding","tickRotation","tickValues","animate","COLORS","Title","getTimeUnitsToDisable","App","setMessages","setData","searchWord","setSearchWord","setColorMap","selectedSenders","setSelectedSenders","selectedTimeUnit","setSelectedTimeUnit","hasData","dataForTimeUnit","useEffect","newData","word","toLowerCase","filterMessages","createColorMap","padding","xs","lg","display","marginBottom","Search","placeholder","onSearch","enterButton","flex","HotApp","hot","module","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e11dec52.chunk.js","sourcesContent":["/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL || '/', window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line fp/no-mutation, no-param-reassign\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        // eslint-disable-next-line fp/no-mutation\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { BarItemProps } from '@nivo/bar';\n\nexport interface Message {\n  sender: string;\n  content: string | null;\n  time: number;\n}\n\nexport enum TimeUnit {\n  DAY = 'DAY',\n  WEEK = 'WEEK',\n  MONTH = 'MONTH',\n  YEAR = 'YEAR',\n}\n\nexport type DataForTimeUnit = Pick<BarItemProps['data'], 'id'>;\n\nexport type Data = {\n  senders: Message['sender'][];\n  numberOfMessages: Record<TimeUnit, DataForTimeUnit[]>;\n};\n","import { decode } from 'utf8';\nimport { groupBy, sortBy, orderBy, mapValues } from 'lodash';\nimport {\n  format,\n  startOfDay,\n  startOfWeek,\n  startOfMonth,\n  startOfYear,\n  eachDayOfInterval,\n  eachWeekOfInterval,\n  eachMonthOfInterval,\n  eachYearOfInterval,\n} from 'date-fns';\n\nimport { TimeUnit, Data, DataForTimeUnit, Message } from '../models';\n\nconst { DAY, WEEK, MONTH, YEAR } = TimeUnit;\n\nexport interface FileMessage {\n  sender_name: string;\n  content?: string;\n  timestamp_ms: number;\n}\n\nexport interface FileContent {\n  messages: FileMessage[];\n}\n\nexport async function getMessages(files: File[]): Promise<Message[]> {\n  const promisesForMessages = Array.from(files).map(getMessagesFromFile);\n  const messages = (await Promise.all(promisesForMessages)).flat();\n  return messages;\n}\n\nexport function convertMessagesToData(messages: Message[]): Data {\n  const sortedMessages = sortMessagesByOldestFirst(messages);\n  const senders = getSendersByMostMessagesFirst(messages);\n\n  const convert = (unit: TimeUnit): DataForTimeUnit[] =>\n    convertMessagesToDataForTimeUnit(sortedMessages, unit, senders);\n\n  return {\n    senders,\n    numberOfMessages: {\n      DAY: convert(DAY),\n      WEEK: convert(WEEK),\n      MONTH: convert(MONTH),\n      YEAR: convert(YEAR),\n    },\n  };\n}\n\nexport function filterMessages(messages: Message[], word: string): Message[] {\n  return messages.filter(message => message.content?.toLowerCase().includes(word.toLowerCase()));\n}\n\nfunction sortMessagesByOldestFirst(messages: Message[]): Message[] {\n  return sortBy(messages, 'time');\n}\n\nasync function getMessagesFromFile(file: File): Promise<Message[]> {\n  const content = await readJsonObjectFile(file);\n  return content ? extractMessages(content as FileContent) : [];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function readJsonObjectFile(file: File): Promise<Record<string, any> | null> {\n  const string = await readFile(file);\n  return string ? JSON.parse(string) : null;\n}\n\nfunction readFile(file: File): Promise<string | null> {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n\n    // eslint-disable-next-line fp/no-mutation\n    reader.onload = (event): void => {\n      const result = event.target?.result;\n      resolve(result ? result.toString() : null);\n    };\n\n    reader.readAsText(file);\n  });\n}\n\nfunction extractMessages({ messages }: FileContent): Message[] {\n  return messages.map(({ sender_name, content, timestamp_ms }) => ({\n    sender: decode(sender_name),\n    content: content ? decode(content) : null,\n    time: timestamp_ms,\n  }));\n}\n\nfunction convertMessagesToDataForTimeUnit(\n  messages: Message[],\n  timeUnit: TimeUnit,\n  senders: Message['sender'][],\n): DataForTimeUnit[] {\n  return getTimesWithMessages(messages, timeUnit).map(({ time, messages: messagesForThatTime }) => {\n    const numberOfMessagesBySender = getNumberOfMessagesBySender(messagesForThatTime);\n\n    return {\n      id: formatTime(Number(time), timeUnit),\n      ...senders.reduce(\n        (result, sender) => ({\n          ...result,\n          [sender]: numberOfMessagesBySender[sender] || 0,\n        }),\n        {},\n      ),\n    };\n  });\n}\n\nfunction getNumberOfMessagesBySender(messages: Message[]): Record<Message['sender'], number> {\n  return mapValues(groupMessagesBySender(messages), messagesBySender => messagesBySender.length);\n}\n\nfunction getTimesWithMessages(\n  messages: Message[],\n  unit: TimeUnit,\n): { time: number; messages: Message[] }[] {\n  const messagesGroupedByTime = groupMessagesByTime(messages, unit);\n  const getInterval = getIntervalFn(messages, unit);\n\n  return getInterval().map(date => ({\n    time: date.getTime(),\n    messages: messagesGroupedByTime[date.getTime()] || [],\n  }));\n}\n\nfunction groupMessagesByTime(messages: Message[], unit: TimeUnit): Record<string, Message[]> {\n  return groupBy(messages, ({ time }) => getStartTimeFn(unit)(time));\n}\n\nfunction getStartTimeFn(unit: TimeUnit): (time: number) => number {\n  const fns: Record<TimeUnit, (time: number) => number> = {\n    DAY: time => startOfDay(time).getTime(),\n    WEEK: time => startOfWeek(time, { weekStartsOn: 1 }).getTime(),\n    MONTH: time => startOfMonth(time).getTime(),\n    YEAR: time => startOfYear(time).getTime(),\n  };\n\n  return fns[unit];\n}\n\nfunction getIntervalFn(messages: Message[], unit: TimeUnit): () => Date[] {\n  if (messages.length === 0) {\n    return (): Date[] => [];\n  }\n\n  const firstTime = messages[0].time;\n  const lastTime = messages[messages.length - 1].time;\n\n  const start = getStartTimeFn(unit)(firstTime);\n  const end = lastTime;\n\n  const fns: Record<TimeUnit, () => Date[]> = {\n    DAY: () => eachDayOfInterval({ start, end }),\n    WEEK: () => eachWeekOfInterval({ start, end }, { weekStartsOn: 1 }),\n    MONTH: () => eachMonthOfInterval({ start, end }),\n    YEAR: () => eachYearOfInterval({ start, end }),\n  };\n\n  return fns[unit];\n}\n\nfunction getSendersByMostMessagesFirst(messages: Message[]): Message['sender'][] {\n  return orderBy(\n    Object.entries(getNumberOfMessagesBySender(messages)).map(([sender, numberOfMessages]) => ({\n      sender,\n      numberOfMessages,\n    })),\n    'numberOfMessages',\n    'desc',\n  ).map(({ sender }) => sender);\n}\n\nfunction groupMessagesBySender(messages: Message[]): Record<Message['sender'], Message[]> {\n  return groupBy(messages, ({ sender }) => sender);\n}\n\nfunction formatTime(time: number, unit: TimeUnit): string {\n  const formats: Record<TimeUnit, string> = {\n    DAY: 'dd/MM/yyyy',\n    WEEK: 'dd/MM/yyyy',\n    MONTH: 'MMM yyyy',\n    YEAR: 'yyyy',\n  };\n  const extras: Record<TimeUnit, string> = {\n    DAY: '',\n    WEEK: ' week',\n    MONTH: '',\n    YEAR: '',\n  };\n\n  return `${format(new Date(time), formats[unit])}${extras[unit]}`;\n}\n","import React, { FC, CSSProperties } from 'react';\nimport { Upload as AntUpload, Button } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { RcFile } from 'antd/lib/upload';\n\nimport { Message } from '../models';\nimport { getMessages } from '../dataUtils';\n\nimport './Upload.css';\n\ntype UploadProps = {\n  onComplete: (messages: Message[]) => void;\n  style?: CSSProperties;\n};\n\n// TODO: Support uploading a directory, from where all messages_*.json files would be used\nconst Upload: FC<UploadProps> = ({ onComplete, style }) => (\n  <div>\n    <AntUpload\n      beforeUpload={async (fileBeingProcessed, allFiles): Promise<void> => {\n        if (isLastFile(fileBeingProcessed, allFiles)) {\n          const messages = await getMessages(allFiles);\n          onComplete(messages);\n        }\n        return Promise.resolve();\n      }}\n      customRequest={noopToPreventXhrRequest}\n      accept=\"application/json\"\n      multiple\n      showUploadList={false}\n    >\n      <Button block style={style}>\n        <UploadOutlined /> Upload messages\n      </Button>\n    </AntUpload>\n  </div>\n);\n\nfunction isLastFile(file: RcFile, fileList: RcFile[]): boolean {\n  return file.uid === fileList[fileList.length - 1].uid;\n}\n\nfunction noopToPreventXhrRequest(): void {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nexport default Upload;\n","import React, { FC, useState } from 'react';\nimport { Button, Drawer, Typography } from 'antd';\nimport { ButtonProps } from 'antd/lib/button';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\n\nconst { Paragraph, Text } = Typography;\n\nconst InstructionsButton: FC<ButtonProps> = ({ style }) => {\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n\n  return (\n    <div>\n      <Button type=\"link\" block onClick={(): void => setIsDrawerOpen(true)} style={style}>\n        How does it work\n        <QuestionCircleOutlined />\n      </Button>\n\n      <Drawer\n        title=\"How does it work\"\n        onClose={(): void => setIsDrawerOpen(false)}\n        visible={isDrawerOpen}\n        width={Math.min(window.innerWidth, 480)}\n        footer={\n          <div style={{ textAlign: 'center' }}>\n            Made with{' '}\n            <span role=\"img\" aria-label=\"love\">\n              💙\n            </span>{' '}\n            by{' '}\n            <a href=\"https://github.com/oliverviljamaa\" target=\"_blank\" rel=\"noopener noreferrer\">\n              Oliver Viljamaa\n            </a>\n            .\n          </div>\n        }\n      >\n        <Paragraph>\n          You need to request your data from Facebook to get the message files needed to use this\n          visualization tool. It&apos;s easy and secure, but you may need to wait a bit.\n        </Paragraph>\n\n        <ol>\n          <li>\n            Follow{' '}\n            <a\n              href=\"https://www.facebook.com/help/212802592074644\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Facebook&apos;s guide on how to request a copy of your data\n            </a>\n            . Select only <Text strong>Messages</Text> from the categories in the download page.\n            Choose <Text strong>Format: JSON</Text> and <Text strong>Media Quality: Low</Text> and\n            click <Text strong>Create File</Text>.\n          </li>\n\n          <li>\n            When the file is ready, Facebook will send you an email titled{' '}\n            <Text strong>Your Facebook information file is ready</Text>. If you have many messages,\n            this may take up to a few days.\n          </li>\n\n          <li>\n            Download the file from the link in the email and extract the zipped file&apos;s\n            contents.\n          </li>\n\n          <li>\n            Come back to this site, click <Text strong>Upload messages</Text> and select all the{' '}\n            <Text strong>messages_*.json</Text> files from any chat folder. You&apos;ll find the\n            chat folders in the <Text strong>inbox/</Text> folder in the folder you just extracted.\n          </li>\n\n          <li>\n            Don&apos;t worry, your messages are never uploaded anywhere — the tool is built with\n            privacy in mind and works locally on your computer. To verify this, try loading the\n            page, turning off your internet connection, and uploading some messages: the tool will\n            still work.\n          </li>\n\n          <li>\n            Enjoy and{' '}\n            <a href=\"https://forms.gle/Dqn4NC6tRrH1D5qA7\" target=\"_blank\" rel=\"noopener noreferrer\">\n              leave feedback\n            </a>\n            !\n          </li>\n        </ol>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default InstructionsButton;\n","import React, { FC, CSSProperties } from 'react';\nimport { Radio } from 'antd';\n\nimport { TimeUnit } from '../models';\n\ntype TimeUnitRadioProps = {\n  selected: TimeUnit;\n  onSelect: (unit: TimeUnit) => void;\n  disabled: boolean;\n  disabledUnits: TimeUnit[];\n  style: CSSProperties;\n};\n\n// TODO: Fix no time unit being selected on initialisation\nconst TimeUnitRadio: FC<TimeUnitRadioProps> = ({\n  selected,\n  onSelect,\n  disabled,\n  disabledUnits,\n  style,\n}) => (\n  <Radio.Group disabled={disabled} style={style}>\n    {Object.values(TimeUnit).map(unit => (\n      <Radio.Button\n        value={unit}\n        checked={unit === selected}\n        onChange={({ target: { value } }): void => onSelect(value as TimeUnit)}\n        disabled={disabledUnits.includes(unit)}\n        key={unit}\n      >\n        {unit}\n      </Radio.Button>\n    ))}\n  </Radio.Group>\n);\n\nexport default TimeUnitRadio;\n","import React, { FC, Fragment } from 'react';\nimport { Checkbox, Divider, Badge } from 'antd';\n\nimport { Message } from '../models';\n\ntype Sender = Message['sender'];\n\ntype SendersProps = {\n  senders: Sender[];\n  selected: Sender[];\n  onChange: (senders: Sender[]) => void;\n  colorMap: Record<Sender, string>;\n};\n\nconst Senders: FC<SendersProps> = ({ senders, selected, onChange, colorMap }) => {\n  return (\n    <div>\n      <Checkbox\n        indeterminate={selected.length > 0 && selected.length < senders.length}\n        onChange={({ target: { checked } }): void => onChange(checked ? senders : [])}\n        checked={selected.length === senders.length}\n      >\n        All senders\n      </Checkbox>\n\n      <Divider style={{ margin: '12px 0' }} />\n\n      {senders.map(sender => (\n        <Fragment key={sender}>\n          <Checkbox\n            onChange={({ target: { checked } }): void =>\n              onChange(checked ? [...selected, sender] : selected.filter(name => name !== sender))\n            }\n            checked={selected.includes(sender)}\n          >\n            <Badge color={colorMap[sender]} text={sender} />\n          </Checkbox>\n          <br />\n        </Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport default Senders;\n","import React, { FC } from 'react';\nimport { Empty } from 'antd';\n\nconst EmptyState: FC = () => (\n  <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} style={{ marginTop: 128 }} />\n);\n\nexport default EmptyState;\n","import React, { FC } from 'react';\nimport { ResponsiveBar, Axis } from '@nivo/bar';\n\nimport { DataForTimeUnit, Message } from '../models';\n\nconst MAX_TICKS = 20;\n\ntype ChartProps = {\n  senders: Message['sender'][];\n  data: DataForTimeUnit[];\n  colorMap: Record<Message['sender'], string>;\n};\n\nconst Chart: FC<ChartProps> = ({ senders, data, colorMap }) => (\n  <div style={{ height: 640 }}>\n    <ResponsiveBar\n      data={data}\n      keys={senders}\n      colors={senders.map(sender => colorMap[sender])}\n      margin={{ top: 48, right: 48, bottom: 96, left: 72 }}\n      enableLabel={false}\n      axisBottom={{\n        tickPadding: 8,\n        tickRotation: -45,\n        tickValues: getTimesToShowTicksFor(data),\n      }}\n      animate={false}\n    />\n  </div>\n);\n\nfunction getTimesToShowTicksFor(data: DataForTimeUnit[]): Axis['tickValues'] {\n  return data.length > MAX_TICKS\n    ? data\n        .filter((_, index) => {\n          const interval = Math.floor(data.length / MAX_TICKS);\n          return index % interval === 0;\n        })\n        .map(({ id }) => id as string)\n    : undefined;\n}\n\nexport default Chart;\n","// TODO: Consider new colors, potentially from https://medialab.github.io/iwanthue/\nconst COLORS: string[] = [\n  '#dc3f66',\n  '#67be40',\n  '#a859ce',\n  '#3fc06f',\n  '#d246a2',\n  '#4f8c28',\n  '#616cdc',\n  '#b8b939',\n  '#5861a9',\n  '#de9230',\n  '#4c96d0',\n  '#d1512e',\n  '#47c3d7',\n  '#a9484b',\n  '#65c59e',\n  '#944e98',\n  '#85bd67',\n  '#cf87d1',\n  '#44894d',\n  '#9594de',\n  '#918724',\n  '#a04a72',\n  '#31957f',\n  '#e383a2',\n  '#2a6a45',\n  '#e3876d',\n  '#9fab64',\n  '#9e622c',\n  '#696b2b',\n  '#d1a563',\n];\n\nexport default COLORS;\n","import React, { FC, useState, useEffect } from 'react';\nimport { Typography, Row, Col, Alert, Input } from 'antd';\n\nimport { convertMessagesToData, filterMessages } from './dataUtils';\nimport { TimeUnit, Data, Message } from './models';\n\nimport Upload from './Upload';\nimport InstructionsButton from './InstructionsButton';\nimport TimeUnitRadio from './TimeUnitRadio';\nimport Senders from './Senders';\nimport EmptyState from './EmptyState';\nimport Chart from './Chart';\nimport COLORS from './COLORS';\n\nconst { Title } = Typography;\n\nconst App: FC = () => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [data, setData] = useState(convertMessagesToData(messages));\n  const [searchWord, setSearchWord] = useState('');\n  const [colorMap, setColorMap] = useState({});\n  const [selectedSenders, setSelectedSenders] = useState(data.senders);\n  const [selectedTimeUnit, setSelectedTimeUnit] = useState(TimeUnit.MONTH);\n\n  const { senders, numberOfMessages } = data;\n  const hasData = senders.length > 0;\n  const dataForTimeUnit = numberOfMessages[selectedTimeUnit];\n\n  useEffect(() => {\n    const filteredMessages = searchWord ? filterMessages(messages, searchWord) : messages;\n    const newData = convertMessagesToData(filteredMessages);\n    setData(newData);\n    setSelectedSenders(newData.senders);\n    setColorMap(createColorMap(newData));\n  }, [messages, searchWord]);\n\n  return (\n    <main style={{ padding: 32 }}>\n      <Title>Messenger stats</Title>\n\n      <Row>\n        <Col xs={24} lg={0}>\n          <Alert\n            message=\"To use the visualization tool, please return to this page on a device with a bigger screen, such as your laptop or desktop computer.\"\n            type=\"warning\"\n          />\n        </Col>\n\n        <Col xs={0} lg={24}>\n          <div style={{ display: 'flex' }}>\n            <div>\n              <InstructionsButton />\n\n              <Upload onComplete={setMessages} style={{ marginBottom: 24 }} />\n\n              <div style={{ marginBottom: 24 }}>\n                <Input.Search\n                  placeholder=\"Filter by keyword\"\n                  aria-label=\"Filter by keyword\"\n                  onSearch={(value): void => setSearchWord(value)}\n                  role=\"textbox\"\n                  enterButton\n                />\n              </div>\n\n              <TimeUnitRadio\n                selected={selectedTimeUnit}\n                onSelect={setSelectedTimeUnit}\n                disabled={!hasData}\n                disabledUnits={getTimeUnitsToDisable(data)}\n                style={{ marginBottom: 24 }}\n              />\n\n              {senders.length > 0 && (\n                <Senders\n                  senders={senders}\n                  selected={selectedSenders}\n                  onChange={setSelectedSenders}\n                  colorMap={colorMap}\n                />\n              )}\n            </div>\n\n            {/* TODO: Add chat title */}\n\n            {/* TODO: Add loading state */}\n\n            <div style={{ flex: 1 }}>\n              {hasData ? (\n                <Chart senders={selectedSenders} data={dataForTimeUnit} colorMap={colorMap} />\n              ) : (\n                <EmptyState />\n              )}\n            </div>\n          </div>\n        </Col>\n      </Row>\n    </main>\n  );\n};\n\nfunction createColorMap(newData: Data): Record<string, string> {\n  return newData.senders.reduce(\n    (result, sender, index) => ({\n      ...result,\n      [sender]: COLORS[index % COLORS.length],\n    }),\n    {},\n  );\n}\n\nfunction getTimeUnitsToDisable(data: Data): TimeUnit[] {\n  return Object.values(TimeUnit).filter(unit => data.numberOfMessages[unit].length > 500);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { hot } from 'react-hot-loader'; // eslint-disable-line import/no-extraneous-dependencies\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst HotApp = hot(module)(App);\nReactDOM.render(<HotApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}