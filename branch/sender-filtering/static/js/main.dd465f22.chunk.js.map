{"version":3,"sources":["serviceWorker.ts","models.ts","dataUtils/dataUtils.ts","Upload/Upload.tsx","TimeUnitRadio/TimeUnitRadio.tsx","Senders/Senders.tsx","EmptyState/EmptyState.tsx","Chart/Chart.tsx","COLORS.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message","TimeUnit","DAY","WEEK","MONTH","YEAR","getData","files","a","promisesForMessages","Array","from","map","getMessages","Promise","all","messages","flat","convertMessagesToData","emptyData","senders","sortedMessages","sortBy","sortMessagesByOldestFirst","orderBy","Object","entries","getNumberOfMessagesBySender","sender","numberOfMessages","getSendersByMostMessagesFirst","convert","unit","timeUnit","messagesGroupedByTime","groupBy","time","getStartTimeFn","groupMessagesByTime","length","firstTime","lastTime","start","end","eachDayOfInterval","eachWeekOfInterval","weekStartsOn","eachMonthOfInterval","eachYearOfInterval","getIntervalFn","getInterval","date","getTime","getTimesWithMessages","numberOfMessagesBySender","id","formatTime","Number","reduce","result","convertMessagesToDataForTimeUnit","file","readJsonObjectFile","content","extractMessages","readFile","string","JSON","parse","resolve","reader","FileReader","onload","event","target","toString","readAsText","sender_name","timestamp_ms","decode","mapValues","groupMessagesBySender","messagesBySender","startOfDay","startOfWeek","startOfMonth","startOfYear","format","Date","noopToPreventXhrRequest","Upload","onComplete","style","beforeUpload","fileBeingProcessed","allFiles","fileList","uid","data","customRequest","accept","multiple","showUploadList","block","UploadOutlined","TimeUnitRadio","selected","onSelect","disabled","disabledUnits","Group","values","Button","value","checked","onChange","includes","key","Senders","colors","indeterminate","margin","index","filter","name","color","text","EmptyState","image","PRESENTED_IMAGE_SIMPLE","marginTop","getTimesToShowTicksFor","_","Math","floor","undefined","Chart","height","keys","top","right","bottom","left","enableLabel","axisBottom","tickPadding","tickRotation","tickValues","animate","COLORS","Title","getTimeUnitsToDisable","App","useState","setData","selectedSenders","setSelectedSenders","selectedTimeUnit","setSelectedTimeUnit","dataForTimeUnit","padding","display","newData","marginBottom","flex","HotApp","hot","module","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd465f22.chunk.js","sourcesContent":["/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL || '/', window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line fp/no-mutation, no-param-reassign\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        // eslint-disable-next-line fp/no-mutation\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { BarItemProps } from '@nivo/bar';\n\nexport interface Message {\n  sender: string;\n  content: string | null;\n  time: number;\n}\n\nexport enum TimeUnit {\n  DAY = 'DAY',\n  WEEK = 'WEEK',\n  MONTH = 'MONTH',\n  YEAR = 'YEAR',\n}\n\nexport type DataForTimeUnit = Pick<BarItemProps['data'], 'id'>;\n\nexport type Data = {\n  senders: Message['sender'][];\n  messages: Record<TimeUnit, DataForTimeUnit[]>;\n};\n","import { decode } from 'utf8';\nimport { groupBy, sortBy, orderBy, mapValues } from 'lodash';\nimport {\n  format,\n  startOfDay,\n  startOfWeek,\n  startOfMonth,\n  startOfYear,\n  eachDayOfInterval,\n  eachWeekOfInterval,\n  eachMonthOfInterval,\n  eachYearOfInterval,\n} from 'date-fns';\n\nimport { TimeUnit, Data, DataForTimeUnit, Message } from '../models';\n\nconst { DAY, WEEK, MONTH, YEAR } = TimeUnit;\n\nexport interface FileMessage {\n  sender_name: string;\n  content?: string;\n  timestamp_ms: number;\n}\n\nexport interface FileContent {\n  messages: FileMessage[];\n}\n\nexport async function getData(files: File[]): Promise<Data> {\n  const promisesForMessages = Array.from(files).map(getMessages);\n  const messages = (await Promise.all(promisesForMessages)).flat();\n\n  return convertMessagesToData(messages);\n}\n\nexport const emptyData: Data = {\n  senders: [],\n  messages: {\n    DAY: [],\n    WEEK: [],\n    MONTH: [],\n    YEAR: [],\n  },\n};\n\nfunction convertMessagesToData(messages: Message[]): Data {\n  const sortedMessages = sortMessagesByOldestFirst(messages);\n  const senders = getSendersByMostMessagesFirst(messages);\n\n  const convert = (unit: TimeUnit): DataForTimeUnit[] =>\n    convertMessagesToDataForTimeUnit(sortedMessages, unit, senders);\n\n  return {\n    senders,\n    messages: {\n      DAY: convert(DAY),\n      WEEK: convert(WEEK),\n      MONTH: convert(MONTH),\n      YEAR: convert(YEAR),\n    },\n  };\n}\n\nfunction sortMessagesByOldestFirst(messages: Message[]): Message[] {\n  return sortBy(messages, 'time');\n}\n\nasync function getMessages(file: File): Promise<Message[]> {\n  const content = await readJsonObjectFile(file);\n  return content ? extractMessages(content as FileContent) : [];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function readJsonObjectFile(file: File): Promise<Record<string, any> | null> {\n  const string = await readFile(file);\n  return string ? JSON.parse(string) : null;\n}\n\nfunction readFile(file: File): Promise<string | null> {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n\n    // eslint-disable-next-line fp/no-mutation\n    reader.onload = (event): void => {\n      const result = event.target?.result;\n      resolve(result ? result.toString() : null);\n    };\n\n    reader.readAsText(file);\n  });\n}\n\nfunction extractMessages({ messages }: FileContent): Message[] {\n  return messages.map(({ sender_name, content, timestamp_ms }) => ({\n    sender: decode(sender_name),\n    content: content ? decode(content) : null,\n    time: timestamp_ms,\n  }));\n}\n\nfunction convertMessagesToDataForTimeUnit(\n  messages: Message[],\n  timeUnit: TimeUnit,\n  senders: Message['sender'][],\n): DataForTimeUnit[] {\n  return getTimesWithMessages(messages, timeUnit).map(({ time, messages: messagesForThatTime }) => {\n    const numberOfMessagesBySender = getNumberOfMessagesBySender(messagesForThatTime);\n\n    return {\n      id: formatTime(Number(time), timeUnit),\n      ...senders.reduce(\n        (result, sender) => ({\n          ...result,\n          [sender]: numberOfMessagesBySender[sender] || 0,\n        }),\n        {},\n      ),\n    };\n  });\n}\n\nfunction getNumberOfMessagesBySender(messages: Message[]): Record<Message['sender'], number> {\n  return mapValues(groupMessagesBySender(messages), messagesBySender => messagesBySender.length);\n}\n\nfunction getTimesWithMessages(\n  messages: Message[],\n  unit: TimeUnit,\n): { time: number; messages: Message[] }[] {\n  const messagesGroupedByTime = groupMessagesByTime(messages, unit);\n  const getInterval = getIntervalFn(messages, unit);\n\n  return getInterval().map(date => ({\n    time: date.getTime(),\n    messages: messagesGroupedByTime[date.getTime()] || [],\n  }));\n}\n\nfunction groupMessagesByTime(messages: Message[], unit: TimeUnit): Record<string, Message[]> {\n  return groupBy(messages, ({ time }) => getStartTimeFn(unit)(time));\n}\n\nfunction getStartTimeFn(unit: TimeUnit): (time: number) => number {\n  const fns: Record<TimeUnit, (time: number) => number> = {\n    DAY: time => startOfDay(time).getTime(),\n    WEEK: time => startOfWeek(time, { weekStartsOn: 1 }).getTime(),\n    MONTH: time => startOfMonth(time).getTime(),\n    YEAR: time => startOfYear(time).getTime(),\n  };\n\n  return fns[unit];\n}\n\nfunction getIntervalFn(messages: Message[], unit: TimeUnit): () => Date[] {\n  if (messages.length === 0) {\n    return (): Date[] => [];\n  }\n\n  const firstTime = messages[0].time;\n  const lastTime = messages[messages.length - 1].time;\n\n  const start = getStartTimeFn(unit)(firstTime);\n  const end = lastTime;\n\n  const fns: Record<TimeUnit, () => Date[]> = {\n    DAY: () => eachDayOfInterval({ start, end }),\n    WEEK: () => eachWeekOfInterval({ start, end }, { weekStartsOn: 1 }),\n    MONTH: () => eachMonthOfInterval({ start, end }),\n    YEAR: () => eachYearOfInterval({ start, end }),\n  };\n\n  return fns[unit];\n}\n\nfunction getSendersByMostMessagesFirst(messages: Message[]): Message['sender'][] {\n  return orderBy(\n    Object.entries(getNumberOfMessagesBySender(messages)).map(([sender, numberOfMessages]) => ({\n      sender,\n      numberOfMessages,\n    })),\n    'numberOfMessages',\n    'desc',\n  ).map(({ sender }) => sender);\n}\n\nfunction groupMessagesBySender(messages: Message[]): Record<Message['sender'], Message[]> {\n  return groupBy(messages, ({ sender }) => sender);\n}\n\nfunction formatTime(time: number, unit: TimeUnit): string {\n  const formats: Record<TimeUnit, string> = {\n    DAY: 'dd/MM/yyyy',\n    WEEK: 'dd/MM/yyyy',\n    MONTH: 'MMM yyyy',\n    YEAR: 'yyyy',\n  };\n  const extras: Record<TimeUnit, string> = {\n    DAY: '',\n    WEEK: ' week',\n    MONTH: '',\n    YEAR: '',\n  };\n\n  return `${format(new Date(time), formats[unit])}${extras[unit]}`;\n}\n","import React, { FC, CSSProperties } from 'react';\nimport { Upload as AntUpload, Button } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\n\nimport { RcFile } from 'antd/lib/upload';\nimport { Data } from '../models';\nimport { getData } from '../dataUtils';\n\nimport './Upload.css';\n\ntype UploadProps = {\n  onComplete: (data: Data) => void;\n  style: CSSProperties;\n};\n\n// TODO: Support uploading a directory, from where all messages_*.json files would be used\nconst Upload: FC<UploadProps> = ({ onComplete, style }) => (\n  <div>\n    <AntUpload\n      beforeUpload={async (fileBeingProcessed, allFiles): Promise<void> => {\n        if (isLastFile(fileBeingProcessed, allFiles)) {\n          const data = await getData(allFiles);\n          onComplete(data);\n        }\n        return Promise.resolve();\n      }}\n      customRequest={noopToPreventXhrRequest}\n      accept=\"application/json\"\n      multiple\n      showUploadList={false}\n    >\n      <Button block style={style}>\n        <UploadOutlined /> Upload messages\n      </Button>\n    </AntUpload>\n  </div>\n);\n\nfunction isLastFile(file: RcFile, fileList: RcFile[]): boolean {\n  return file.uid === fileList[fileList.length - 1].uid;\n}\n\nfunction noopToPreventXhrRequest(): void {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nexport default Upload;\n","import React, { FC, CSSProperties } from 'react';\nimport { Radio } from 'antd';\n\nimport { TimeUnit } from '../models';\n\ntype TimeUnitRadioProps = {\n  selected: TimeUnit;\n  onSelect: (unit: TimeUnit) => void;\n  disabled: boolean;\n  disabledUnits: TimeUnit[];\n  style: CSSProperties;\n};\n\nconst TimeUnitRadio: FC<TimeUnitRadioProps> = ({\n  selected,\n  onSelect,\n  disabled,\n  disabledUnits,\n  style,\n}) => (\n  <Radio.Group disabled={disabled} style={style}>\n    {Object.values(TimeUnit).map(unit => (\n      <Radio.Button\n        value={unit}\n        checked={unit === selected}\n        onChange={({ target: { value } }): void => onSelect(value as TimeUnit)}\n        disabled={disabledUnits.includes(unit)}\n        key={unit}\n      >\n        {unit}\n      </Radio.Button>\n    ))}\n  </Radio.Group>\n);\n\nexport default TimeUnitRadio;\n","import React, { FC, Fragment } from 'react';\nimport { Checkbox, Divider, Badge } from 'antd';\n\nimport { Message } from '../models';\n\ntype Sender = Message['sender'];\n\ntype SendersProps = {\n  senders: Sender[];\n  selected: Sender[];\n  onChange: (senders: Sender[]) => void;\n  colors: string[];\n};\n\nconst Senders: FC<SendersProps> = ({ senders, selected, onChange, colors }) => {\n  return (\n    <div>\n      <Checkbox\n        indeterminate={selected.length > 0 && selected.length < senders.length}\n        onChange={({ target: { checked } }): void => onChange(checked ? senders : [])}\n        checked={selected.length === senders.length}\n      >\n        All senders\n      </Checkbox>\n\n      <Divider style={{ margin: '12px 0' }} />\n\n      {senders.map((sender, index) => (\n        <Fragment key={sender}>\n          <Checkbox\n            onChange={({ target: { checked } }): void =>\n              onChange(checked ? [...selected, sender] : selected.filter(name => name !== sender))\n            }\n            checked={selected.includes(sender)}\n          >\n            <Badge color={colors[index % colors.length]} text={sender} />\n          </Checkbox>\n          <br />\n        </Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport default Senders;\n","import React, { FC } from 'react';\nimport { Empty } from 'antd';\n\nconst EmptyState: FC = () => (\n  <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} style={{ marginTop: 128 }} />\n);\n\nexport default EmptyState;\n","import React, { FC } from 'react';\nimport { ResponsiveBar, Axis } from '@nivo/bar';\n\nimport { DataForTimeUnit, Message } from '../models';\n\nconst MAX_TICKS = 20;\n\ntype ChartProps = {\n  senders: Message['sender'][];\n  data: DataForTimeUnit[];\n  colors: string[];\n};\n\nconst Chart: FC<ChartProps> = ({ senders, data, colors }) => (\n  <div style={{ height: 640 }}>\n    <ResponsiveBar\n      data={data}\n      keys={senders}\n      colors={colors}\n      margin={{ top: 48, right: 48, bottom: 96, left: 72 }}\n      enableLabel={false}\n      axisBottom={{\n        tickPadding: 8,\n        tickRotation: -45,\n        tickValues: getTimesToShowTicksFor(data),\n      }}\n      animate={false}\n    />\n  </div>\n);\n\nfunction getTimesToShowTicksFor(data: DataForTimeUnit[]): Axis['tickValues'] {\n  return data.length > MAX_TICKS\n    ? data\n        .filter((_, index) => {\n          const interval = Math.floor(data.length / MAX_TICKS);\n          return index % interval === 0;\n        })\n        .map(({ id }) => id as string)\n    : undefined;\n}\n\nexport default Chart;\n","// TODO: Consider new colors, potentially from https://medialab.github.io/iwanthue/\nconst COLORS: string[] = [\n  '#dc3f66',\n  '#67be40',\n  '#a859ce',\n  '#3fc06f',\n  '#d246a2',\n  '#4f8c28',\n  '#616cdc',\n  '#b8b939',\n  '#5861a9',\n  '#de9230',\n  '#4c96d0',\n  '#d1512e',\n  '#47c3d7',\n  '#a9484b',\n  '#65c59e',\n  '#944e98',\n  '#85bd67',\n  '#cf87d1',\n  '#44894d',\n  '#9594de',\n  '#918724',\n  '#a04a72',\n  '#31957f',\n  '#e383a2',\n  '#2a6a45',\n  '#e3876d',\n  '#9fab64',\n  '#9e622c',\n  '#696b2b',\n  '#d1a563',\n];\n\nexport default COLORS;\n","import React, { FC, useState } from 'react';\nimport { Typography } from 'antd';\n\nimport { emptyData } from './dataUtils';\nimport { TimeUnit, Data } from './models';\n\nimport Upload from './Upload';\nimport TimeUnitRadio from './TimeUnitRadio';\nimport Senders from './Senders';\nimport EmptyState from './EmptyState';\nimport Chart from './Chart';\nimport COLORS from './COLORS';\n\nconst { Title } = Typography;\n\nconst App: FC = () => {\n  const [data, setData] = useState(emptyData);\n  const [selectedSenders, setSelectedSenders] = useState(data.senders);\n  const [selectedTimeUnit, setSelectedTimeUnit] = useState(TimeUnit.MONTH);\n\n  const { senders, messages } = data;\n  const dataForTimeUnit = messages[selectedTimeUnit];\n\n  return (\n    <main style={{ padding: 32 }}>\n      <Title>Messenger stats</Title>\n\n      <div style={{ display: 'flex' }}>\n        <div>\n          <Upload\n            onComplete={(newData): void => {\n              setSelectedSenders(newData.senders);\n              setData(newData);\n            }}\n            style={{ marginBottom: 24 }}\n          />\n\n          <TimeUnitRadio\n            selected={selectedTimeUnit}\n            onSelect={setSelectedTimeUnit}\n            disabled={data === emptyData}\n            disabledUnits={getTimeUnitsToDisable(data)}\n            style={{ marginBottom: 24 }}\n          />\n\n          {senders.length > 0 && (\n            <Senders\n              senders={senders}\n              selected={selectedSenders}\n              onChange={setSelectedSenders}\n              colors={COLORS}\n            />\n          )}\n        </div>\n\n        {/* TODO: Add instructions drawer for how to download data and what to upload */}\n\n        {/* TODO: Add keyword filtering */}\n\n        {/* TODO: Add chat title */}\n\n        {/* TODO: Add loading state */}\n\n        <div style={{ flex: 1 }}>\n          {data === emptyData ? (\n            <EmptyState />\n          ) : (\n            <Chart senders={selectedSenders} data={dataForTimeUnit} colors={COLORS} />\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n\nfunction getTimeUnitsToDisable(data: Data): TimeUnit[] {\n  return Object.values(TimeUnit).filter(unit => data.messages[unit].length > 500);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { hot } from 'react-hot-loader'; // eslint-disable-line import/no-extraneous-dependencies\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst HotApp = hot(module)(App);\nReactDOM.render(<HotApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}