{"version":3,"sources":["models.ts","dataUtils/dataUtils.ts","Upload/Upload.tsx","TimeUnitRadio/TimeUnitRadio.tsx","EmptyState/EmptyState.tsx","Chart/Chart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TimeUnit","DAY","WEEK","MONTH","YEAR","getData","files","a","promisesForMessages","Array","from","map","getMessages","Promise","all","messages","flat","convertMessagesToData","emptyData","convertMessagesToDataForTimeUnit","file","readJsonObjectFile","content","extractMessages","readFile","string","JSON","parse","resolve","reader","FileReader","onload","event","result","target","toString","readAsText","sender_name","timestamp_ms","sender","decode","time","timeUnit","messagesByOldestFirst","sortBy","messagesGroupedByTime","unit","startOf","startOfDay","getTime","startOfWeek","weekStartsOn","startOfMonth","startOfYear","groupBy","groupMessagesByTime","sendersByMostMessagesFirst","orderBy","Object","entries","getNumberOfMessagesBySender","numberOfMessages","getSendersByMostMessagesFirst","numberOfMessagesBySender","id","formatTime","Number","reduce","mapValues","groupMessagesBySender","messagesBySender","length","format","Date","noopToPreventXhrRequest","Upload","onComplete","style","beforeUpload","fileBeingProcessed","allFiles","fileList","uid","data","customRequest","accept","multiple","showUploadList","UploadOutlined","TimeUnitRadio","selected","onSelect","disabled","disabledUnits","Group","values","Button","value","checked","onChange","includes","key","EmptyState","image","PRESENTED_IMAGE_SIMPLE","marginTop","getTimesToShowTicksFor","filter","_","index","Math","floor","undefined","Chart","height","keys","margin","top","right","bottom","left","enableLabel","axisBottom","tickPadding","tickRotation","tickValues","legends","dataFrom","anchor","direction","translateX","itemWidth","itemHeight","animate","Title","getTimeUnitsToDisable","App","useState","setData","selectedTimeUnit","setSelectedTimeUnit","dataForTimeUnit","padding","marginRight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.24c4db1c.chunk.js","sourcesContent":["import { BarItemProps } from '@nivo/bar';\n\nexport interface Message {\n  sender: string;\n  content: string | null;\n  time: number;\n}\n\nexport enum TimeUnit {\n  DAY = 'DAY',\n  WEEK = 'WEEK',\n  MONTH = 'MONTH',\n  YEAR = 'YEAR',\n}\n\nexport type DataForTimeUnit = Pick<BarItemProps['data'], 'id'>;\n\nexport type Data = Record<TimeUnit, DataForTimeUnit[]>;\n","import { decode } from 'utf8';\nimport { groupBy, sortBy, orderBy, mapValues } from 'lodash';\nimport { format, startOfDay, startOfWeek, startOfMonth, startOfYear } from 'date-fns';\n\nimport { TimeUnit, Data, DataForTimeUnit, Message } from '../models';\n\nconst { DAY, WEEK, MONTH, YEAR } = TimeUnit;\n\nexport interface FileMessage {\n  sender_name: string;\n  content?: string;\n  timestamp_ms: number;\n}\n\nexport interface FileContent {\n  messages: FileMessage[];\n}\n\nexport async function getData(files: File[]): Promise<Data> {\n  const promisesForMessages = Array.from(files).map(getMessages);\n  const messages = (await Promise.all(promisesForMessages)).flat();\n\n  return convertMessagesToData(messages);\n}\n\nexport const emptyData: Data = {\n  DAY: [],\n  WEEK: [],\n  MONTH: [],\n  YEAR: [],\n};\n\nfunction convertMessagesToData(messages: Message[]): Data {\n  return {\n    DAY: convertMessagesToDataForTimeUnit(messages, DAY),\n    WEEK: convertMessagesToDataForTimeUnit(messages, WEEK),\n    MONTH: convertMessagesToDataForTimeUnit(messages, MONTH),\n    YEAR: convertMessagesToDataForTimeUnit(messages, YEAR),\n  };\n}\n\nasync function getMessages(file: File): Promise<Message[]> {\n  const content = await readJsonObjectFile(file);\n  return content ? extractMessages(content as FileContent) : [];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function readJsonObjectFile(file: File): Promise<Record<string, any> | null> {\n  const string = await readFile(file);\n  return string ? JSON.parse(string) : null;\n}\n\nfunction readFile(file: File): Promise<string | null> {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n\n    // eslint-disable-next-line fp/no-mutation\n    reader.onload = (event): void => {\n      const result = event.target?.result;\n      resolve(result ? result.toString() : null);\n    };\n\n    reader.readAsText(file);\n  });\n}\n\nfunction extractMessages({ messages }: FileContent): Message[] {\n  return messages.map(({ sender_name, content, timestamp_ms }) => ({\n    sender: decode(sender_name),\n    content: content ? decode(content) : null,\n    time: timestamp_ms,\n  }));\n}\n\n// TODO: Add items for time units without messages\nfunction convertMessagesToDataForTimeUnit(\n  messages: Message[],\n  timeUnit: TimeUnit,\n): DataForTimeUnit[] {\n  const messagesByOldestFirst = sortBy(messages, 'time');\n  const messagesGroupedByTime = groupMessagesByTime(messagesByOldestFirst, timeUnit);\n  const sendersByMostMessagesFirst = getSendersByMostMessagesFirst(messagesByOldestFirst);\n\n  return Object.entries(messagesGroupedByTime).map(([time, messagesForThatTime]) => {\n    const numberOfMessagesBySender = getNumberOfMessagesBySender(messagesForThatTime);\n\n    return {\n      id: formatTime(Number(time), timeUnit),\n      ...sendersByMostMessagesFirst.reduce(\n        (result, sender) => ({\n          ...result,\n          [sender]: numberOfMessagesBySender[sender] || 0,\n        }),\n        {},\n      ),\n    };\n  });\n}\n\nfunction getNumberOfMessagesBySender(messages: Message[]): Record<Message['sender'], number> {\n  return mapValues(groupMessagesBySender(messages), messagesBySender => messagesBySender.length);\n}\n\nfunction groupMessagesByTime(messages: Message[], unit: TimeUnit): Record<string, Message[]> {\n  const startOf: Record<TimeUnit, (time: number) => number> = {\n    DAY: time => startOfDay(time).getTime(),\n    WEEK: time => startOfWeek(time, { weekStartsOn: 1 }).getTime(),\n    MONTH: time => startOfMonth(time).getTime(),\n    YEAR: time => startOfYear(time).getTime(),\n  };\n\n  return groupBy(messages, ({ time }) => startOf[unit](time));\n}\n\nfunction getSendersByMostMessagesFirst(messages: Message[]): Message['sender'][] {\n  return orderBy(\n    Object.entries(getNumberOfMessagesBySender(messages)).map(([sender, numberOfMessages]) => ({\n      sender,\n      numberOfMessages,\n    })),\n    'numberOfMessages',\n    'desc',\n  ).map(({ sender }) => sender);\n}\n\nfunction groupMessagesBySender(messages: Message[]): Record<Message['sender'], Message[]> {\n  return groupBy(messages, ({ sender }) => sender);\n}\n\nfunction formatTime(time: number, unit: TimeUnit): string {\n  const formats: Record<TimeUnit, string> = {\n    DAY: 'dd/MM/yyyy',\n    WEEK: 'dd/MM/yyyy',\n    MONTH: 'MMM yyyy',\n    YEAR: 'yyyy',\n  };\n  const extras: Record<TimeUnit, string> = {\n    DAY: '',\n    WEEK: ' week',\n    MONTH: '',\n    YEAR: '',\n  };\n\n  return `${format(new Date(time), formats[unit])}${extras[unit]}`;\n}\n","import React, { FC, CSSProperties } from 'react';\nimport { Upload as AntUpload, Button } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\n\nimport { RcFile } from 'antd/lib/upload';\nimport { Data } from '../models';\nimport { getData } from '../dataUtils';\n\ntype UploadProps = {\n  onComplete: (data: Data) => void;\n  style?: CSSProperties;\n};\n\n// TODO: Support uploading a directory, from where all messages_*.json files would be used\nconst Upload: FC<UploadProps> = ({ onComplete, style }) => (\n  <AntUpload\n    beforeUpload={async (fileBeingProcessed, allFiles): Promise<void> => {\n      if (isLastFile(fileBeingProcessed, allFiles)) {\n        const data = await getData(allFiles);\n        onComplete(data);\n      }\n      return Promise.resolve();\n    }}\n    customRequest={noopToPreventXhrRequest}\n    accept=\"application/json\"\n    multiple\n    showUploadList={false}\n  >\n    <Button style={style}>\n      <UploadOutlined /> Upload messages\n    </Button>\n  </AntUpload>\n);\n\nfunction isLastFile(file: RcFile, fileList: RcFile[]): boolean {\n  return file.uid === fileList[fileList.length - 1].uid;\n}\n\nfunction noopToPreventXhrRequest(): void {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nexport default Upload;\n","import React, { FC } from 'react';\nimport { Radio } from 'antd';\n\nimport { TimeUnit } from '../models';\n\ntype TimeUnitRadioProps = {\n  selected: TimeUnit;\n  onSelect: (unit: TimeUnit) => void;\n  disabled: boolean;\n  disabledUnits: TimeUnit[];\n};\n\nconst TimeUnitRadio: FC<TimeUnitRadioProps> = ({ selected, onSelect, disabled, disabledUnits }) => (\n  <Radio.Group disabled={disabled}>\n    {Object.values(TimeUnit).map(unit => (\n      <Radio.Button\n        value={unit}\n        checked={unit === selected}\n        onChange={({ target: { value } }): void => onSelect(value as TimeUnit)}\n        disabled={disabledUnits.includes(unit)}\n        key={unit}\n      >\n        {unit}\n      </Radio.Button>\n    ))}\n  </Radio.Group>\n);\n\nexport default TimeUnitRadio;\n","import React, { FC } from 'react';\nimport { Empty } from 'antd';\n\nconst EmptyState: FC = () => (\n  <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} style={{ marginTop: 128 }} />\n);\n\nexport default EmptyState;\n","import React, { FC } from 'react';\nimport { ResponsiveBar, Axis } from '@nivo/bar';\n\nimport { DataForTimeUnit } from '../models';\n\nconst MAX_TICKS = 20;\n\ntype ChartProps = {\n  data: DataForTimeUnit[];\n};\n\nconst Chart: FC<ChartProps> = ({ data }) => (\n  <div style={{ height: 640 }}>\n    <ResponsiveBar\n      data={data}\n      keys={data.length > 0 ? Object.keys(data[0]).filter(key => key !== 'id') : []} // TODO: Add to Data\n      margin={{ top: 48, right: 256, bottom: 96, left: 48 }}\n      enableLabel={false}\n      axisBottom={{\n        tickPadding: 8,\n        tickRotation: -45,\n        tickValues: getTimesToShowTicksFor(data),\n      }}\n      legends={[\n        {\n          dataFrom: 'keys',\n          anchor: 'bottom-right',\n          direction: 'column',\n          translateX: 128,\n          itemWidth: 128,\n          itemHeight: 20,\n        },\n      ]}\n      animate={false}\n    />\n  </div>\n);\n\nfunction getTimesToShowTicksFor(data: DataForTimeUnit[]): Axis['tickValues'] {\n  return data.length > MAX_TICKS\n    ? data\n        .filter((_, index) => {\n          const interval = Math.floor(data.length / MAX_TICKS);\n          return index % interval === 0;\n        })\n        .map(({ id }) => id as string)\n    : undefined;\n}\n\nexport default Chart;\n","import React, { FC, useState } from 'react';\nimport { Typography } from 'antd';\n\nimport { emptyData } from './dataUtils';\nimport { TimeUnit, Data } from './models';\n\nimport Upload from './Upload';\nimport TimeUnitRadio from './TimeUnitRadio';\nimport EmptyState from './EmptyState';\nimport Chart from './Chart';\n\nconst { Title } = Typography;\n\nconst App: FC = () => {\n  const [data, setData] = useState(emptyData);\n  const [selectedTimeUnit, setSelectedTimeUnit] = useState(TimeUnit.MONTH);\n\n  const dataForTimeUnit = data[selectedTimeUnit];\n\n  return (\n    <main style={{ padding: 32 }}>\n      <Title>Messenger stats</Title>\n\n      <Upload onComplete={setData} style={{ marginRight: 16 }} />\n\n      <TimeUnitRadio\n        selected={selectedTimeUnit}\n        onSelect={setSelectedTimeUnit}\n        disabled={data === emptyData}\n        disabledUnits={getTimeUnitsToDisable(data)}\n      />\n\n      {/* TODO: Add keyword filtering */}\n\n      {/* TODO: Add sender filtering, potentially with own legend */}\n\n      {/* TODO: Add chat title */}\n\n      {/* TODO: Add loading state */}\n\n      {data === emptyData ? <EmptyState /> : <Chart data={dataForTimeUnit} />}\n    </main>\n  );\n};\n\nfunction getTimeUnitsToDisable(data: Data): TimeUnit[] {\n  return Object.values(TimeUnit).filter(unit => data[unit].length > 500);\n}\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL || '/', window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line fp/no-mutation, no-param-reassign\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        // eslint-disable-next-line fp/no-mutation\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}